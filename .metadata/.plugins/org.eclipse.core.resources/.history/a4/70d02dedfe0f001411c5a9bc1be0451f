/**
 * 
 */
package com.kelly.mapreduce;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
//import org.apache.hadoop.util.GenericOptionsParser;

public class CommandLineArgWordCount {

	/* specific string which you want to search in input file, initialize by command line arg*/
	public static String ConstantWord; 
	
	  public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable>
	  {
	
	    private final static IntWritable one = new IntWritable(1);
	    private Text word = new Text();
	
	    public void map(Object key, Text value, Context context) throws IOException, InterruptedException 
	    {
	      StringTokenizer itr = new StringTokenizer(value.toString());
	      while (itr.hasMoreTokens()) 
	      {
	    	String comp = itr.nextToken();  
	    	if(comp.equalsIgnoreCase(ConstantWord))  
	    	{
		        word.set(comp);
		        context.write(word, one);
	    	}
	      }
	    }
	  }

	  public static class IntSumReducer extends Reducer<Text,IntWritable,Text,IntWritable> 
	  {
	    private IntWritable result = new IntWritable();
	    public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException
	    {
	      int sum = 0;
	      for (IntWritable val : values) 
	      {
	        sum += val.get();
	      }
	      result.set(sum);
	      context.write(key, result);
	    }
	  }

  public static void main(String[] args) throws Exception 
  {
	/*Command line argument as specific word, which we going to count in input file*/
	if (args[2] != null)
	{
		Configuration conf = new Configuration();
	    Job job = new Job(conf, "word count");
	    
	    job.setJarByClass(CommandLineArgWordCount.class);
	    
	    job.setMapperClass(TokenizerMapper.class);
	    job.setCombinerClass(IntSumReducer.class);
	    job.setReducerClass(IntSumReducer.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	    
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    ConstantWord = args[2].toString();
	    
	    System.exit(job.waitForCompletion(true) ? 0 : 1);
		}
		else
		{
			System.out.print("Program cannot read arguement from cmd line");
		}
  }
}

